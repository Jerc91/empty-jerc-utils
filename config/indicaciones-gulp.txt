Estructura configuración gulp:

Archivo que relaciona las tareas programadas para el entorno de aplicación front, estas tareas tienen el fin de optimizar la aplicación y organizar la estructura básica del sitio.

Dentro de las tareas que se disponen:

	vendor:	Organizar las librerías terceras dentro de las rutas que sea asignadas a la ruta de desarrollo.
	vendor.js:	Concatena o agrupa las librerias de javascript.
	vendor.css:	Concatena o agrupa las librerias de hojas de estilo.
	vendor.fonts:	Copia las fuentes indicadas en la ruta de desarrollo configurada.
	vendor.html:	Copia los archivos html en la ruta de desarrollo configurada.
	vendor.pakages:	Genera paquetes que agrupan varios archivos; es decir si se crea un paquete de nombre forms, donde se especifican varios archivos (JS) estos serán minificados con el nombre del paquete.

	config:	Función para copiar los archivos de configuracion a la carpeta de producción.
	fonts:	Función para copiar las fuentes a la carpeta de producción.
	less:	Función para compilar los archivos less y generar las hojas de estilo a la carpeta de desarrollo.
	min:css:	Función para minificar los archivos css y guardarlos en la carpeta de producción.
	min:html:	Función para minificar los archivos html y guardarlos en la carpeta de producción.
	min:js:	Función para minificar los archivos js y guardarlos en la carpeta de producción.
	min:json:	Función para minificar los archivos json y guardarlos en la carpeta de producción.
	min:img:	Función para optimizar las imágenes para aplicaciones web y guardarlos en la carpeta de producción.

	watch:	Configura observadores hacia los archivos des desarrollo mediante los globs y ejecuta sus respectivas tareas.
	default:	Ejecuta la tarea watch y crea un subproceso hijo para la creación del servidor.
	prod:	Ejecuta las tareas de minificación para pasar los archivos de desarrollo a producción.


Estas tareas se basan en archivos de configuración (vendor.json, config.json).


config.json:	Información necesaria para configurar las tareas programadas

	packages.name: Nombre de los archivos que se uniran tras la tarea de vendor.
	packages.path: Ruta del archivo que contiene las rutas de las librerias terceras que serán adjuntas a las rutas indicadas.

	paths.packages:	Ruta de la carpeta contenedora donde están las librerias terceras.
	paths.dev:	Ruta de la carpeta para la aplicación en modo desarrollo.
	paths.prod:	Ruta de la carpeta para la aplicación en modo producción.
	paths.filesUpdate:	Ruta del archivo donde se encuentran los archivos que se han modificado en el servidor y que deberan ser actualizados en el cliente.
	paths.manifestCache:	Ruta del manifiesto de cache, para aplicaciones que usen esta tecnología.
	paths.cacheJSON	Ruta donde se encuentra el listado de archivos que serán guardados inicialmente en la cache.

	types.config 	Globs para archivos de configuración como el manifes.appcache.
	types.css	Globs para hojas de estilos.
	types.fonts	Globs para fuentes.
	types.html	Globs para páginas html.
	types.img	Globs para imágenes.
	types.js	Globs para scripts.
	types.json	Globs para archivos json.
	types.less	Globs para archivos less.

	excludeWatchs:	Archivos que serán excluidos cuando para la lista de archivos a actualizar.

	scriptServer:	Comando a ejecutar para crear el servidor web

Vendor.json;	Se especifican las rutas relativas a la ubicación del archivo gulp, estas rutas son las que se copian a la carpeta de desarrollo. Esta configuración contiene modos para la configuración de paquetes y de archivos a concatenar.

	["archivo1.js", "archivo1.js"]:	Se concatenan los archivos y se crea un archivo "vendor.js" en la carpeta "/js/vendor".
	{
		"nombrePaquete": [
			"archivo1.js", 
			"archivo2.js"
		]
	}:	Se concatenan los archivos y se crea un archivo "nombrePaquete.js" en la carpeta "/js/vendor".
	{
		"assets/fonts/roboto": [
			"roboto-fontface/fonts/roboto/Roboto-Bold.ttf",
			"roboto-fontface/fonts/roboto/Roboto-Bold.woff2"
		]
	}:	Se copian los archivos especificos en la ruta "assets/fonts/roboto".
	{
		"views/polymer": [
			"@paper-styles/classes/*.html"
			"@paper-styles/*.{css,html}",
			"@iron-meta/hero.svg"
		]
	}:	Con el "@" se excluyen los registros de las demas tareas para ser copiados a la carpeta de desarrollo.

Uso de comandos gulp, una vez se instalen los packages mediante los comandos "npm install", y "bower install" se podrá ejecutar el comando gulp vendor (Para copiar las librerías) y luego gulp (ejecuta la tarea default), o se puede ejecutar gulp nombreTarea.